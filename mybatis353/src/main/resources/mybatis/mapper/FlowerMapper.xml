<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.nihility.mybatis.mapper.FlowerMapper">

  <resultMap id="innerResultMapSelect" type="gardener">
    <id property="id" column="id"/>
    <result property="name" column="name"/>
    <result property="age" column="age"/>
    <result property="addTime" column="add_time"/>
    <result property="updateTime" column="update_time"/>

    <association property="partner" column="id" javaType="gardener" select="selectGardnerById"/>
    <collection property="flowers" column="id" ofType="flower" select="selectFlowersByGardenerId"/>
  </resultMap>

  <resultMap id="innerResultMap" type="gardener">
    <id property="id" column="id"/>
    <result property="name" column="name"/>
    <result property="age" column="age"/>
    <result property="addTime" column="add_time"/>
    <result property="updateTime" column="update_time"/>

    <association property="partner" column="id" javaType="gardener" select="selectGardnerById"/>
    <!-- 缺点，得把所有得数据在 SQL 中一行查询出来 -->
    <!--<association property="partner" javaType="gardener">
      <id property="id" column="partner_id" />
      <result property="name" column="partner_name"/>
      <result property="age" column="partner_age"/>
      <result property="addTime" column="partner_add_time"/>
      <result property="updateTime" column="partner_update_time"/>
    </association>-->
    <collection property="flowers" ofType="flower">
      <id property="id" column="flower_id" jdbcType="VARCHAR"/>
      <result property="nameChinese" column="flower_name_chinese" jdbcType="VARCHAR"/>
      <result property="nameEnglish" column="flower_name_english" jdbcType="VARCHAR"/>
      <result property="age" column="flower_age" jdbcType="INTEGER"/>
      <result property="addTime" column="flower_add_time"/>
      <result property="updateTime" column="flower_update_time"/>
    </collection>
  </resultMap>

  <!-- #{property,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler} -->

  <select id="selectGardenerByIdWithResultMapSelect" resultMap="innerResultMapSelect">
    SELECT gd.id, gd.name, gd.age, gd.add_time, gd.update_time
    FROM gardener gd
    WHERE gd.id = #{id,jdbcType=VARCHAR}
  </select>

  <select id="selectGardenerByIdWithResultMap" resultMap="innerResultMap">
    SELECT gd.id, gd.name, gd.age, gd.add_time, gd.update_time,
           f.id flower_id, f.name_english flower_name_english, f.name_chinese flower_name_chinese,
           f.age flower_age, f.add_time flower_add_time, f.update_time flower_update_time
    FROM gardener gd LEFT JOIN gardener_flower gf ON gd.id = gf.gardener_id
        LEFT JOIN flower f ON f.id = gf.flower_id
    WHERE gd.id = #{id}
  </select>

  <select id="selectGardnerById" resultType="gardener" parameterType="string">
    SELECT id, name, age, add_time, update_time
    FROM gardener
    WHERE id = #{id}
  </select>

  <select id="selectFlowersByGardenerId" resultType="flower" parameterType="string">
    SELECT fl.id, fl.name_english, fl.name_chinese, fl.age, fl.add_time, fl.update_time
    FROM flower fl, gardener_flower gf
    WHERE fl.id = gf.flower_id AND gf.gardener_id = #{id}
  </select>

  <select id="searchById" resultType="flower" parameterType="string">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
    WHERE id = #{id}
  </select>

  <select id="searchByIdAsMap" resultType="map" parameterType="string">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
    WHERE id = #{id}
  </select>

  <select id="searchAll" resultType="flower">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
  </select>

  <select id="searchLikeEnglishName" resultType="flower" parameterType="string">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
    WHERE name_english LIKE CONCAT(CONCAT('%', #{name}), '%')
  </select>

  <select id="searchLikeEnglishName2" resultType="flower" parameterType="string">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
    WHERE name_english LIKE "%"#{name}"%"
  </select>

  <select id="searchAllAsMap" resultType="map">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
  </select>

  <!-- Mysql 自增主键，返回实体 id 会被 mysql 自增主键赋值 statement.getGenreatedKeys() -->
  <insert id="insertMysqlAutoGenerateId" parameterType="autoIncrementEntity"
          useGeneratedKeys="true" keyProperty="id">
    INSERT INTO auto_increment_id (name, add_time, update_time)
    VALUES (#{name}, now(), now())
  </insert>

  <insert id="insertNoAutoGenerateId" parameterType="flower" keyProperty="id">
    <selectKey keyProperty="id" keyColumn="id" resultType="string" order="BEFORE" >
        SELECT NOW()
    </selectKey>
    INSERT INTO flower (id, name_english, name_chinese, age, add_time, update_time)
    VALUES (#{id}, #{nameEnglish}, #{nameChinese}, #{age}, now(), now())
  </insert>

  <insert id="insertByEntity" parameterType="flower">
    INSERT INTO flower (id, name_english, name_chinese, age, add_time, update_time)
    VALUES (#{id}, #{nameEnglish}, #{nameChinese}, #{age}, now(), now())
  </insert>

  <update id="updateByEntity" parameterType="flower">
    UPDATE flower
    <set>
      <if test="nameEnglish != null">name_english=#{nameEnglish},</if>
      <if test="nameChinese != null">name_chinese=#{nameChinese},</if>
      <if test="age != null">age=#{age},</if>
      update_time = now()
    </set>
    WHERE id = #{id}
  </update>

  <update id="updateColumnById">
    UPDATE flower
    SET ${field} = #{param3}, update_time = now()
    WHERE id = #{param1}
    <choose>
      <when test="arg != null">statement</when>
      <when test="arg1 != null">statement1</when>
      <otherwise>otherwise_statement</otherwise>
    </choose>
  </update>

  <update id="updateNameById">
    UPDATE flower
    SET name_chinese = #{param2},
        update_time  = now()
    WHERE id = #{param1}
  </update>

  <delete id="deleteById" parameterType="string">
    DELETE
    FROM flower
    WHERE id = #{id}
  </delete>

  <!-- mybatis 批量插入对比 -->
  <insert id="insertFlowerEntity" parameterType="flower">
    INSERT INTO flower (id, name_english, name_chinese, age, add_time, update_time)
    VALUES (#{id}, #{nameEnglish}, #{nameChinese}, #{age}, #{addTime}, #{updateTime})
  </insert>

  <insert id="insertFlowerList" parameterType="java.util.List">
    INSERT INTO flower (id, name_english, name_chinese, age, add_time, update_time)
    VALUES
      <foreach collection="flowerList" index="index" item="item" separator=",">
        (#{item.id}, #{item.nameEnglish}, #{item.nameChinese}, #{item.age}, #{item.addTime}, #{item.updateTime})
      </foreach>
  </insert>

  <select id="selectFlowerFetchSize" resultType="flower" fetchSize="10">
    SELECT id, name_english, name_chinese, age, add_time, update_time
    FROM flower
  </select>

</mapper>
